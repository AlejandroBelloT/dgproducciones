#!/usr/bin/env node

// Script para diagnosticar conexi√≥n remota a cPanel
import dotenv from 'dotenv';
import mysql from 'mysql2/promise';
import { exec } from 'child_process';
import { promisify } from 'util';

dotenv.config({ path: '.env.local' });
const execAsync = promisify(exec);

const config = {
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    port: parseInt(process.env.DB_PORT || '3306'),
    charset: 'utf8mb4'
};

async function checkNetworkConnectivity() {
    console.log('üåê Verificando conectividad de red...\n');

    try {
        console.log(`üìç Probando ping a ${config.host}...`);
        const { stdout: pingResult } = await execAsync(`ping -c 3 ${config.host}`);
        console.log('‚úÖ Ping exitoso - El servidor es alcanzable');

        console.log(`\nüîå Probando conexi√≥n al puerto ${config.port}...`);
        try {
            const { stdout: portResult } = await execAsync(`timeout 10 bash -c "echo >/dev/tcp/${config.host}/${config.port}" 2>/dev/null && echo "Puerto abierto" || echo "Puerto cerrado"`);
            console.log(`üìä Estado del puerto: ${portResult.trim()}`);
        } catch (error) {
            console.log('‚ùå Puerto 3306 no accesible desde esta conexi√≥n');
        }

    } catch (error) {
        console.log(`‚ùå Error de conectividad: ${error.message}`);
    }
}

async function getPublicIP() {
    try {
        const { stdout } = await execAsync('curl -s https://ifconfig.me');
        return stdout.trim();
    } catch (error) {
        return 'No se pudo obtener';
    }
}

async function testDatabaseConnection() {
    console.log('\nüîó Probando conexi√≥n a la base de datos...\n');
    console.log('üìã Configuraci√≥n actual:');
    console.log(`   Host: ${config.host}`);
    console.log(`   Puerto: ${config.port}`);
    console.log(`   Usuario: ${config.user}`);
    console.log(`   Base de datos: ${config.database}`);
    console.log(`   Contrase√±a: ${config.password ? '***configurada***' : '‚ùå NO CONFIGURADA'}`);

    const publicIP = await getPublicIP();
    console.log(`   Tu IP p√∫blica: ${publicIP}`);

    try {
        console.log('\nüîÑ Intentando conectar...');
        const connection = await mysql.createConnection(config);

        const [rows] = await connection.execute('SELECT 1 as test, DATABASE() as db_name, USER() as current_user, @@hostname as server_host');

        console.log('\nüéâ ¬°CONEXI√ìN EXITOSA!');
        console.log(`üìä Servidor: ${rows[0].server_host}`);
        console.log(`üìä Base de datos: ${rows[0].db_name}`);
        console.log(`üë§ Usuario conectado: ${rows[0].current_user}`);

        // Listar tablas
        const [tables] = await connection.execute('SHOW TABLES');
        console.log(`üìã Tablas encontradas: ${tables.length}`);

        if (tables.length > 0) {
            console.log('\nüìë Tablas disponibles:');
            tables.forEach((table, index) => {
                const tableName = Object.values(table)[0];
                console.log(`   ${index + 1}. ${tableName}`);
            });
        }

        await connection.end();

        console.log('\n‚úÖ La configuraci√≥n de base de datos es correcta!');
        return true;

    } catch (error) {
        console.log('\n‚ùå Error de conexi√≥n:');
        console.log(`   C√≥digo: ${error.code}`);
        console.log(`   Mensaje: ${error.message}`);

        // Diagn√≥stico espec√≠fico seg√∫n el error
        switch (error.code) {
            case 'ECONNREFUSED':
                console.log('\nüí° Diagn√≥stico: CONEXI√ìN RECHAZADA');
                console.log('   üîç Posibles causas:');
                console.log('   ‚Ä¢ El puerto 3306 est√° bloqueado en el servidor');
                console.log('   ‚Ä¢ El servidor MySQL no acepta conexiones remotas');
                console.log('   ‚Ä¢ Firewall del hosting bloqueando conexiones externas');
                console.log('\n   üõ†Ô∏è  Soluciones:');
                console.log('   1. Habilitar "Hosts de acceso remoto" en cPanel');
                console.log('   2. Contactar al proveedor para habilitar acceso remoto');
                console.log('   3. Usar t√∫nel SSH si est√° disponible');
                break;

            case 'ENOTFOUND':
                console.log('\nüí° Diagn√≥stico: SERVIDOR NO ENCONTRADO');
                console.log('   üîç El hostname/IP no se puede resolver');
                console.log('   üõ†Ô∏è  Verifica la direcci√≥n del servidor');
                break;

            case 'ER_ACCESS_DENIED_ERROR':
                console.log('\nüí° Diagn√≥stico: ACCESO DENEGADO');
                console.log('   üîç Usuario/contrase√±a incorrectos o sin permisos');
                console.log('   üõ†Ô∏è  Verifica credenciales en cPanel');
                break;

            case 'ETIMEDOUT':
                console.log('\nüí° Diagn√≥stico: TIMEOUT DE CONEXI√ìN');
                console.log('   üîç El servidor no responde en el tiempo esperado');
                console.log('   üõ†Ô∏è  Posible problema de red o servidor sobrecargado');
                break;

            default:
                console.log('\nüí° Error no identificado - revisar configuraci√≥n');
        }

        return false;
    }
}

async function showAlternatives() {
    console.log('\nüîÑ ALTERNATIVAS SI EL ACCESO REMOTO NO FUNCIONA:\n');

    console.log('1. üåê USAR PHPMYADMIN (Inmediato):');
    console.log('   ‚Ä¢ Accede desde cPanel ‚Üí phpMyAdmin');
    console.log('   ‚Ä¢ Puedes exportar/importar datos');
    console.log('   ‚Ä¢ Ideal para desarrollo inicial');

    console.log('\n2. üîß HABILITAR ACCESO REMOTO:');
    console.log('   ‚Ä¢ cPanel ‚Üí "Remote MySQL" o "Hosts de acceso remoto"');
    console.log(`   ‚Ä¢ Agregar tu IP: ${await getPublicIP()}`);
    console.log('   ‚Ä¢ O agregar % para permitir todas las IPs');

    console.log('\n3. üöá T√öNEL SSH (Avanzado):');
    console.log('   ‚Ä¢ ssh -L 3307:localhost:3306 usuario@servidor');
    console.log('   ‚Ä¢ Conectar a localhost:3307 en lugar de IP remota');

    console.log('\n4. üíª DESARROLLO LOCAL:');
    console.log('   ‚Ä¢ Instalar MySQL/MariaDB localmente');
    console.log('   ‚Ä¢ Importar esquema desde phpMyAdmin');
    console.log('   ‚Ä¢ Sincronizar peri√≥dicamente');

    console.log('\n5. üì± API REST (Recomendado para producci√≥n):');
    console.log('   ‚Ä¢ Crear endpoints PHP en el servidor');
    console.log('   ‚Ä¢ La app se conecta v√≠a HTTP/HTTPS');
    console.log('   ‚Ä¢ M√°s seguro y escalable');
}

async function main() {
    console.log('üîç DIAGN√ìSTICO DE CONEXI√ìN REMOTA A CPANEL\n');
    console.log('='.repeat(50));

    await checkNetworkConnectivity();
    const success = await testDatabaseConnection();

    if (!success) {
        await showAlternatives();
    }

    console.log('\n' + '='.repeat(50));
    console.log('üèÅ Diagn√≥stico completado');
}

main().catch(console.error);